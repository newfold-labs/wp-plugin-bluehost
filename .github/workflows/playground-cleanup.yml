name: Cleanup Playground Preview
on:
  pull_request:
    types: [ closed ]

# Disable permissions for all available scopes by default.
# Any needed permissions should be configured at the job level.
permissions: {}

jobs:
  cleanup-preview:
    name: Remove Preview from GitHub Pages
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      deployments: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false

      - name: Get PR number
        id: pr
        run: |
          echo "number=${{ github.event.pull_request.number }}" >> "$GITHUB_OUTPUT"

      - name: Download current GitHub Pages deployment
        continue-on-error: true
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16  # v4.1.8
        with:
          name: github-pages
          path: ./current-pages
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract and cleanup preview files
        id: cleanup
        run: |
          PR_NUM="${{ steps.pr.outputs.number }}"
          ZIP_NAME="bluehost-pr-${PR_NUM}.zip"

          # Create clean directory structure
          mkdir -p gh-pages/previews

          # If we successfully downloaded current pages, extract and filter
          if [ -d "./current-pages" ] && [ -f "./current-pages/artifact.tar" ]; then
            echo "Found existing pages deployment, extracting..."
            cd current-pages
            tar -xf artifact.tar
            cd ..

            # Copy everything except the PR's zip file
            if [ -d "./current-pages/previews" ]; then
              echo "Copying preview files except ${ZIP_NAME}..."
              for file in ./current-pages/previews/*; do
                filename=$(basename "$file")
                if [ "$filename" != "$ZIP_NAME" ]; then
                  cp "$file" "./gh-pages/previews/"
                fi
              done
              echo "removed=true" >> "$GITHUB_OUTPUT"
            else
              echo "No previews directory found in current deployment"
              echo "removed=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No existing pages deployment found or extraction failed"
            echo "removed=false" >> "$GITHUB_OUTPUT"
          fi

          # Create index.html (simple version)
          cat > gh-pages/previews/index.html <<'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Bluehost Plugin - Playground Previews</title>
            <style>
              body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; max-width: 800px; margin: 40px auto; padding: 20px; }
              h1 { color: #333; }
              .preview { background: #f5f5f5; padding: 15px; margin: 10px 0; border-radius: 5px; }
              a { color: #0969da; text-decoration: none; }
              a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <h1>ðŸŽ® WordPress Playground Previews</h1>
            <p>Preview builds of the Bluehost WordPress Plugin for testing in WordPress Playground.</p>
            <p>Active PR previews are listed here automatically.</p>
          </body>
          </html>
          EOF

          # Count remaining preview files
          REMAINING=$(ls -1 gh-pages/previews/*.zip 2>/dev/null | wc -l)
          echo "remaining_count=${REMAINING}" >> "$GITHUB_OUTPUT"

      - name: Upload cleaned pages artifact
        if: steps.cleanup.outputs.removed == 'true'
        uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa  # v3.0.1
        with:
          path: ./gh-pages

      - name: Deploy to GitHub Pages
        if: steps.cleanup.outputs.removed == 'true'
        id: deployment
        uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e  # v4.0.5

      - name: Log cleanup results
        run: |
          if [ "${{ steps.cleanup.outputs.removed }}" == "true" ]; then
            echo "âœ“ Successfully removed preview for PR #${{ steps.pr.outputs.number }}"
            echo "âœ“ Remaining preview files: ${{ steps.cleanup.outputs.remaining_count }}"
          else
            echo "â„¹ No preview file found for PR #${{ steps.pr.outputs.number }} (may not have been created)"
          fi
